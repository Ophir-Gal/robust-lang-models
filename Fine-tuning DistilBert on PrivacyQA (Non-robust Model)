{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Fine-tuning DistilBert on PrivacyQA (Non-robust Model)","provenance":[{"file_id":"https://github.com/huggingface/notebooks/blob/master/transformers_doc/pytorch/custom_datasets.ipynb","timestamp":1620160405794}],"collapsed_sections":["fNMeDAvcHdpL"],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"26400e2c37034bce91f37fbf31f8c56a":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_51cf2d8c8d20486f9b224d264b5d0ada","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_2d5729ecbe8e413c89642c04cd3ce0e1","IPY_MODEL_58cb3205ba874ebaa81a5b7eec18b259"]}},"51cf2d8c8d20486f9b224d264b5d0ada":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2d5729ecbe8e413c89642c04cd3ce0e1":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_7132ae69b2d7400e8c772ebfd3958c37","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":231508,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":231508,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_7434b81d39bc4e918e55f735e8d6dcb9"}},"58cb3205ba874ebaa81a5b7eec18b259":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_d1e55e7b38494480a53fea289621e490","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 232k/232k [00:03&lt;00:00, 68.9kB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_5c9d64f14feb4fd7a8c92939ed8a835f"}},"7132ae69b2d7400e8c772ebfd3958c37":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"7434b81d39bc4e918e55f735e8d6dcb9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d1e55e7b38494480a53fea289621e490":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"5c9d64f14feb4fd7a8c92939ed8a835f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1558a480a3644ea5af9b777bd3febcd1":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_2fc7747e3b064befaf0c838889692aec","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_07f9ac29665344bd9ad130561979241b","IPY_MODEL_ceadae94b3984b73894e47f17e5e56f8"]}},"2fc7747e3b064befaf0c838889692aec":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"07f9ac29665344bd9ad130561979241b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_8ded9a473df04cd989c0d16406da19cd","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":466062,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":466062,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3a3e038ea2bc4f7e9a569748f86f8ec9"}},"ceadae94b3984b73894e47f17e5e56f8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_17c83e12dbd2466e980dde4e612e4956","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 466k/466k [00:00&lt;00:00, 2.45MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_7dd8327bbe70495791e7b894eeb6982e"}},"8ded9a473df04cd989c0d16406da19cd":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"3a3e038ea2bc4f7e9a569748f86f8ec9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"17c83e12dbd2466e980dde4e612e4956":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"7dd8327bbe70495791e7b894eeb6982e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ff6f8dda0178462083afba831b0f7af4":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_e4baf3b82faa47babaecf671ec13342f","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_785aa5036a7b4bdeb4eeada5eaddf3f7","IPY_MODEL_4274bedd340041288bca6ec82fa6da8d"]}},"e4baf3b82faa47babaecf671ec13342f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"785aa5036a7b4bdeb4eeada5eaddf3f7":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_45682a7667f741858c6c0865e45b1774","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":28,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":28,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2e2979aa83ee46f9a1c2e3e74adf1f56"}},"4274bedd340041288bca6ec82fa6da8d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1fc6d09527294ab6bbb565bdf4f26196","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 28.0/28.0 [00:03&lt;00:00, 9.14B/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_79c0bfbeef464ea6b9c0767ef1beb5e6"}},"45682a7667f741858c6c0865e45b1774":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"2e2979aa83ee46f9a1c2e3e74adf1f56":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1fc6d09527294ab6bbb565bdf4f26196":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"79c0bfbeef464ea6b9c0767ef1beb5e6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"78895bb97f994d9d87a8ac59e200c67f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_fc2e8a6886f8487cb706d2953149c0f6","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_58f6c8b68be945eab9b65a0c1759e556","IPY_MODEL_e4872a7db48a495ba824695309dd1e23"]}},"fc2e8a6886f8487cb706d2953149c0f6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"58f6c8b68be945eab9b65a0c1759e556":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_8830fd12aaa14a2d8eea229bc03bca2c","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":442,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":442,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_b9fc8d12168b401a8f4be73f1bd72d69"}},"e4872a7db48a495ba824695309dd1e23":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_5355e6335f4146468dad86a08b0353d1","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 442/442 [00:00&lt;00:00, 833B/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3b63d3a7607a4a56893c9cb43f6a637a"}},"8830fd12aaa14a2d8eea229bc03bca2c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"b9fc8d12168b401a8f4be73f1bd72d69":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5355e6335f4146468dad86a08b0353d1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"3b63d3a7607a4a56893c9cb43f6a637a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0bbdbcfb693148b99db1c4a02edf8577":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c11f83f6c4d94263b7c3101efc0e04d2","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_bc70392fbf924d778c6a270ea05bbd62","IPY_MODEL_3d65d366043f4a22914e772f1d0c9fc5"]}},"c11f83f6c4d94263b7c3101efc0e04d2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"bc70392fbf924d778c6a270ea05bbd62":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_1c867c94879c464f8c9a8dbe89ba56ba","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":267967963,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":267967963,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_ecca7e9b831e4d2fba1e1b62a31cdcef"}},"3d65d366043f4a22914e772f1d0c9fc5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_d8505c5988844866bae4602102177755","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 268M/268M [00:14&lt;00:00, 18.2MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_ade40761470d439da50513203077d4c7"}},"1c867c94879c464f8c9a8dbe89ba56ba":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"ecca7e9b831e4d2fba1e1b62a31cdcef":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d8505c5988844866bae4602102177755":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"ade40761470d439da50513203077d4c7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"d1ImAnYoFaIn"},"source":["# Fine-tuning Bert with PrivacyQA"]},{"cell_type":"markdown","metadata":{"id":"BFjj_pIQFaIs"},"source":["In this experiment, we download, tokenize, and train a 🤗 Transformers model on the PrivacyQA question/answering data. This task takes the text of a privacy-related question asked by a user and requires the model to predict whether the sentiment of the review is positive or negative."]},{"cell_type":"markdown","metadata":{"id":"fNMeDAvcHdpL"},"source":["# Imports / Dependencies"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oUVIHO3XFaId","executionInfo":{"status":"ok","timestamp":1620877064385,"user_tz":240,"elapsed":8042,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"c3da3192-8807-4fbd-da06-d4bae40c41d2"},"source":["# Transformers installation\n","! pip install transformers\n","# To install from source instead of the last release, comment the command above and uncomment the following one.\n","# ! pip install git+https://github.com/huggingface/transformers.git"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting transformers\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b0/9e/5b80becd952d5f7250eaf8fc64b957077b12ccfe73e9c03d37146ab29712/transformers-4.6.0-py3-none-any.whl (2.3MB)\n","\u001b[K     |████████████████████████████████| 2.3MB 29.3MB/s \n","\u001b[?25hCollecting tokenizers<0.11,>=0.10.1\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ae/04/5b870f26a858552025a62f1649c20d29d2672c02ff3c3fb4c688ca46467a/tokenizers-0.10.2-cp37-cp37m-manylinux2010_x86_64.whl (3.3MB)\n","\u001b[K     |████████████████████████████████| 3.3MB 33.3MB/s \n","\u001b[?25hCollecting huggingface-hub==0.0.8\n","  Downloading https://files.pythonhosted.org/packages/a1/88/7b1e45720ecf59c6c6737ff332f41c955963090a18e72acbcbeac6b25e86/huggingface_hub-0.0.8-py3-none-any.whl\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from transformers) (4.0.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n","Collecting sacremoses\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/75/ee/67241dc87f266093c533a2d4d3d69438e57d7a90abb216fa076e7d475d4a/sacremoses-0.0.45-py3-none-any.whl (895kB)\n","\u001b[K     |████████████████████████████████| 901kB 32.5MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.19.5)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers) (20.9)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.41.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.0.12)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2020.12.5)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.7.4.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.4.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (7.1.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.15.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.0.1)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers) (2.4.7)\n","Installing collected packages: tokenizers, huggingface-hub, sacremoses, transformers\n","Successfully installed huggingface-hub-0.0.8 sacremoses-0.0.45 tokenizers-0.10.2 transformers-4.6.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DV-6sgwodB3u"},"source":["import pandas as pd\n","import numpy as np\n","from google.colab import drive\n","import transformers\n","from transformers import DistilBertTokenizerFast, DistilBertModel, BertConfig, DistilBertPreTrainedModel\n","from transformers import DistilBertForSequenceClassification, Trainer, TrainingArguments\n","from sklearn import metrics\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import torch\n","from torch import cuda\n","device = 'cuda' if cuda.is_available() else 'cpu'\n","import seaborn as sns\n","from sklearn.metrics import multilabel_confusion_matrix\n","from sklearn.metrics import plot_confusion_matrix\n","from sklearn.metrics import classification_report, f1_score, accuracy_score\n","import pickle"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IIY3nIgWTOYo"},"source":["# Prepare the Data"]},{"cell_type":"markdown","metadata":{"id":"-Gx8yCt3gIhd"},"source":["Mount google drive"]},{"cell_type":"code","metadata":{"id":"v86HpZOAsmcy"},"source":["!rm -rf ./sample_data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x23L-6HJFaIt","executionInfo":{"status":"ok","timestamp":1620877083153,"user_tz":240,"elapsed":16430,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"e8c7b715-da0c-4a2b-f3ba-c35feb716619"},"source":["from google.colab import drive\n","drive.mount('/content/drive/')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive/\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"R6KN9IwGgKqS"},"source":["Read in the PrivacyQA dataset from google drive (assuming you have a shortcut to the 'privacyQA_dataset' directory under 'MyDrive')"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rsKLfg_Kdjz0","executionInfo":{"status":"ok","timestamp":1620877086183,"user_tz":240,"elapsed":2941,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"3698d3f9-36cd-494b-c4c2-bfd7e252f7f9"},"source":["train_set = pd.read_csv('/content/drive/MyDrive/828E_Ophir_Mollie/privacyQA_dataset/train_opp_annotations')\n","test_set = pd.read_csv('/content/drive/MyDrive/828E_Ophir_Mollie/privacyQA_dataset/test_opp_annotations')\n","print(train_set.head())\n","print(test_set.head())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                                 Folder  ... other\n","0  ../../Dataset/Train/com.cake.browser  ...     0\n","1  ../../Dataset/Train/com.cake.browser  ...     0\n","2  ../../Dataset/Train/com.cake.browser  ...     0\n","3  ../../Dataset/Train/com.cake.browser  ...     0\n","4  ../../Dataset/Train/com.cake.browser  ...     0\n","\n","[5 rows x 12 columns]\n","                                 Folder      DocID  ... audiences unknown\n","0  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...         0       0\n","1  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...         0       0\n","2  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...         0       0\n","3  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...         0       0\n","4  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...         0       0\n","\n","[5 rows x 14 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"t7-y9PToSIPr"},"source":["Drop the unnecessary columns ('audiences' and 'unknown') from the test set."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qYcR5D8DSH9h","executionInfo":{"status":"ok","timestamp":1620877086184,"user_tz":240,"elapsed":2925,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"4cd6ca57-47f4-45c9-b5c4-bd2a965d2e12"},"source":["test_set = test_set.drop(['audiences', 'unknown'], axis=1)\n","print(test_set.head())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                                 Folder      DocID  ... user_choice other\n","0  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...           0     0\n","1  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...           0     0\n","2  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...           0     0\n","3  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...           0     0\n","4  ../../Dataset/Test/com.fiverr.fiverr  Fiverr _1  ...           0     0\n","\n","[5 rows x 12 columns]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zgQ-PPLkFaIt"},"source":["Now let's create sets of inputs (query texts) and labels (onehot-encoded) out of the train and test sets."]},{"cell_type":"code","metadata":{"id":"X5rSOXuFFaIt"},"source":["def read_pqa_split(dataset):\n","    \"\"\" assumes `dataset` is a pandas DataFrame \"\"\"\n","    texts = dataset.Query.to_list()\n","    label_cols = dataset.columns[5:]\n","    labels = dataset[label_cols].values.tolist() # onehot-encoded labels\n","    return texts, labels\n","\n","train_texts, train_labels = read_pqa_split(train_set)\n","test_texts, test_labels = read_pqa_split(test_set)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"W6dLFg0a_dJm"},"source":["Let's check the class distribution in the training set "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cm5nsqT_T_OP","executionInfo":{"status":"ok","timestamp":1620690815444,"user_tz":240,"elapsed":287,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"40c01635-91e8-47eb-a1c3-1363b0dcd644"},"source":["np.array(train_labels).sum(axis=0)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([619, 323, 153,  85,  31,  88,  20])"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"gbc3NJ2yFaIu"},"source":["We now have a train and test dataset, but let's also also create a validation set which we can use for for evaluation\n","and tuning without tainting our test set results. Sklearn has a convenient utility for creating such splits:"]},{"cell_type":"code","metadata":{"id":"ifw23bOpFaIu"},"source":["train_texts, val_texts, train_labels, val_labels = train_test_split(train_texts, train_labels, test_size=.2, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AItzldjfFaIv"},"source":["Alright, we've read in our dataset. Now let's tackle tokenization. We'll eventually train a classifier using\n","pre-trained DistilBert, so let's use the DistilBert tokenizer."]},{"cell_type":"code","metadata":{"id":"SRVdNgNEFaIv","colab":{"base_uri":"https://localhost:8080/","height":164,"referenced_widgets":["26400e2c37034bce91f37fbf31f8c56a","51cf2d8c8d20486f9b224d264b5d0ada","2d5729ecbe8e413c89642c04cd3ce0e1","58cb3205ba874ebaa81a5b7eec18b259","7132ae69b2d7400e8c772ebfd3958c37","7434b81d39bc4e918e55f735e8d6dcb9","d1e55e7b38494480a53fea289621e490","5c9d64f14feb4fd7a8c92939ed8a835f","1558a480a3644ea5af9b777bd3febcd1","2fc7747e3b064befaf0c838889692aec","07f9ac29665344bd9ad130561979241b","ceadae94b3984b73894e47f17e5e56f8","8ded9a473df04cd989c0d16406da19cd","3a3e038ea2bc4f7e9a569748f86f8ec9","17c83e12dbd2466e980dde4e612e4956","7dd8327bbe70495791e7b894eeb6982e","ff6f8dda0178462083afba831b0f7af4","e4baf3b82faa47babaecf671ec13342f","785aa5036a7b4bdeb4eeada5eaddf3f7","4274bedd340041288bca6ec82fa6da8d","45682a7667f741858c6c0865e45b1774","2e2979aa83ee46f9a1c2e3e74adf1f56","1fc6d09527294ab6bbb565bdf4f26196","79c0bfbeef464ea6b9c0767ef1beb5e6"]},"executionInfo":{"status":"ok","timestamp":1620877090297,"user_tz":240,"elapsed":878,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"eb7454b5-bd82-47a3-9f0a-8a6b956328a8"},"source":["tokenizer = DistilBertTokenizerFast.from_pretrained('bert-base-uncased')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"26400e2c37034bce91f37fbf31f8c56a","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=231508.0, style=ProgressStyle(descripti…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"1558a480a3644ea5af9b777bd3febcd1","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=466062.0, style=ProgressStyle(descripti…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ff6f8dda0178462083afba831b0f7af4","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=28.0, style=ProgressStyle(description_w…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"N5latEeTFaIw"},"source":["Now we can simply pass our texts to the tokenizer. We'll pass `truncation=True` and `padding=True`, which will\n","ensure that all of our sequences are padded to the same length and are truncated to be no longer model's maximum input\n","length. This will allow us to feed batches of sequences into the model at the same time."]},{"cell_type":"code","metadata":{"id":"z9R4zUqYFaIw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620877093292,"user_tz":240,"elapsed":422,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"ab45c351-0313-461f-8929-b25828a5edf9"},"source":["train_encodings = tokenizer(train_texts, truncation=True, padding=True)\n","val_encodings = tokenizer(val_texts, truncation=True, padding=True)\n","test_encodings = tokenizer(test_texts, truncation=True, padding=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"L8HK_JksFaIw"},"source":["Now, let's turn our labels and encodings into a Dataset object. In PyTorch, this is done by subclassing a\n","`torch.utils.data.Dataset` object and implementing `__len__` and `__getitem__`. In TensorFlow, we pass our input\n","encodings and labels to the `from_tensor_slices` constructor method. We put the data in this format so that the data\n","can be easily batched such that each key in the batch encoding corresponds to a named parameter of the\n","`DistilBertForSequenceClassification.forward` method of the model we will train."]},{"cell_type":"code","metadata":{"id":"HmRZr9B9FaIx"},"source":["class PqaDataset(torch.utils.data.Dataset):\n","    def __init__(self, encodings, labels):\n","        self.encodings = encodings\n","        self.labels = labels\n","\n","    def __getitem__(self, idx):\n","        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\n","        item['labels'] = torch.tensor(self.labels[idx])\n","        return item\n","\n","    def __len__(self):\n","        return len(self.labels)\n","\n","train_dataset = PqaDataset(train_encodings, train_labels)\n","val_dataset = PqaDataset(val_encodings, val_labels)\n","test_dataset = PqaDataset(test_encodings, test_labels)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZEh5ZvccFaIy"},"source":["Now that our datasets our ready, we can fine-tune a model either with the 🤗\n","`Trainer`/`TFTrainer` or with native PyTorch/TensorFlow. See [training](https://huggingface.co/transformers/training.html)."]},{"cell_type":"markdown","metadata":{"id":"dZNpOUsGFaIz"},"source":["# Fine-tuning with the `Trainer` module"]},{"cell_type":"markdown","metadata":{"id":"ygbA8hwWFaIz"},"source":["The steps above prepared the datasets in the way that the trainer is expecting. Now all we need to do is create a model\n","to fine-tune, define the `TrainingArguments`/`TFTrainingArguments` and\n","instantiate a `Trainer`/`TFTrainer`.\n","\n","Importantly, we need to subclass the Trainer class to make it suitable for multilabel classification (by default it is suited for **_multiclass_** classification, which is different and not waht we want here). The extended class was taken from the example at https://huggingface.co/transformers/main_classes/trainer.html#codecell0."]},{"cell_type":"markdown","metadata":{"id":"2nhP4z6WV9cq"},"source":["First, we need to subclass and adapt the original DistilBert for multi-label calssification --"]},{"cell_type":"code","metadata":{"id":"PN6cknYmU8K2"},"source":["class DistilBertForMultilabelSequenceClassification(DistilBertPreTrainedModel):\n","    def __init__(self, config):\n","        super().__init__(config)\n","        self.num_labels = config.num_labels\n","        self.distilbert = DistilBertModel(config)\n","        self.pre_classifier = torch.nn.Linear(config.dim, config.dim)\n","        self.classifier = torch.nn.Linear(config.dim, config.num_labels)\n","        self.dropout = torch.nn.Dropout(config.seq_classif_dropout)\n","        self.init_weights()\n","\n","    def forward(\n","        self,\n","        input_ids=None,\n","        attention_mask=None,\n","        head_mask=None,\n","        inputs_embeds=None,\n","        labels=None,\n","        output_attentions=None,\n","        output_hidden_states=None,\n","        return_dict=None,\n","    ):\n","        r\"\"\"\n","        labels (:obj:`torch.LongTensor` of shape :obj:`(batch_size,)`, `optional`):\n","            Labels for computing the sequence classification/regression loss. Indices should be in :obj:`[0, ...,\n","            config.num_labels - 1]`. If :obj:`config.num_labels == 1` a regression loss is computed (Mean-Square loss),\n","            If :obj:`config.num_labels > 1` a classification loss is computed (Cross-Entropy).\n","        \"\"\"\n","        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n","\n","        distilbert_output = self.distilbert(\n","            input_ids=input_ids,\n","            attention_mask=attention_mask,\n","            head_mask=head_mask,\n","            inputs_embeds=inputs_embeds,\n","            output_attentions=output_attentions,\n","            output_hidden_states=output_hidden_states,\n","            return_dict=return_dict,\n","        )\n","        hidden_state = distilbert_output[0]  # (bs, seq_len, dim)\n","        pooled_output = hidden_state[:, 0]  # (bs, dim)\n","        pooled_output = self.pre_classifier(pooled_output)  # (bs, dim)\n","        pooled_output = torch.nn.ReLU()(pooled_output)  # (bs, dim)\n","        pooled_output = self.dropout(pooled_output)  # (bs, dim)\n","        logits = self.classifier(pooled_output)  # (bs, num_labels)\n","\n","        loss = None\n","        if labels is not None:\n","            if self.num_labels == 1:\n","                loss_fct = nn.MSELoss()\n","                loss = loss_fct(logits.view(-1), labels.view(-1))\n","            else:\n","                # the onlny modification to the original DistilBert is below\n","                loss_fct = torch.nn.BCEWithLogitsLoss()\n","                loss = loss_fct(logits.view(-1, self.distilbert.config.num_labels),\n","                                labels.float().view(-1, self.distilbert.config.num_labels))\n","\n","        if not return_dict:\n","            output = (logits,) + distilbert_output[1:]\n","            return ((loss,) + output) if loss is not None else output\n","\n","        return transformers.modeling_outputs.SequenceClassifierOutput(\n","            loss=loss,\n","            logits=logits,\n","            hidden_states=distilbert_output.hidden_states,\n","            attentions=distilbert_output.attentions,\n","        )"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RCfKvn9EWGaR"},"source":["Then, we can instantiate the model anf train it --- "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["78895bb97f994d9d87a8ac59e200c67f","fc2e8a6886f8487cb706d2953149c0f6","58f6c8b68be945eab9b65a0c1759e556","e4872a7db48a495ba824695309dd1e23","8830fd12aaa14a2d8eea229bc03bca2c","b9fc8d12168b401a8f4be73f1bd72d69","5355e6335f4146468dad86a08b0353d1","3b63d3a7607a4a56893c9cb43f6a637a","0bbdbcfb693148b99db1c4a02edf8577","c11f83f6c4d94263b7c3101efc0e04d2","bc70392fbf924d778c6a270ea05bbd62","3d65d366043f4a22914e772f1d0c9fc5","1c867c94879c464f8c9a8dbe89ba56ba","ecca7e9b831e4d2fba1e1b62a31cdcef","d8505c5988844866bae4602102177755","ade40761470d439da50513203077d4c7"]},"id":"zRb8JBLOFaI0","executionInfo":{"status":"ok","timestamp":1620693234458,"user_tz":240,"elapsed":1571006,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"7e2e131c-a67b-4b2c-8f0d-a26ab62d2dc5"},"source":["label_names = ['first', 'third', 'datasecurity', 'dataretention', 'user_access', 'user_choice', 'other']\n","\n","training_args = TrainingArguments(\n","    output_dir='/content/drive/MyDrive/828E_Ophir_Mollie/trained_models/non-robust_model_50_epochs_v2', # output directory for model predictions and checkpoints\n","    num_train_epochs=50,              # total number of training epochs\n","    per_device_train_batch_size=16,  # batch size per device during training\n","    per_device_eval_batch_size=64,   # batch size for evaluation\n","    warmup_steps=500,                # number of warmup steps for learning rate scheduler\n","    weight_decay=0.01,               # strength of weight decay\n","    logging_steps=10,\n","    logging_dir='/content/drive/MyDrive/828E_Ophir_Mollie/trained_models/non-robust_model_50_epochs',\n","    load_best_model_at_end=True, # will save/checkpoint the model after every evaluation\n","    evaluation_strategy=\"epoch\", # will evaluate every epoch\n","    # DO NOT USE # label_names=label_names,  # DO NOT USE THIS --- THROWS ERROR\n",")\n","\n","NUM_LABELS = len(label_names)\n","model = DistilBertForMultilabelSequenceClassification.from_pretrained(\n","    \"distilbert-base-uncased\", \n","    num_labels=NUM_LABELS,\n","    id2label=dict(enumerate(label_names)), # use to show text labels\n","    )\n","\n","# Customized Trainer class for Multi-label classification\n","class MultilabelTrainer(Trainer):\n","    def compute_loss(self, model, inputs, return_outputs=False):\n","        labels = inputs.pop(\"labels\")\n","        outputs = model(**inputs)\n","        logits = outputs.logits\n","        loss_fct = torch.nn.BCEWithLogitsLoss()\n","        loss = loss_fct(logits.view(-1, self.model.config.num_labels),\n","                        labels.float().view(-1, self.model.config.num_labels))\n","        return (loss, outputs) if return_outputs else loss\n","\n","trainer = MultilabelTrainer(\n","    model=model,                         # the instantiated 🤗 Transformers model to be trained\n","    args=training_args,                  # training arguments, defined above\n","    train_dataset=train_dataset,         # training dataset\n","    eval_dataset=val_dataset,            # evaluation dataset\n",")\n","\n","# Start the training\n","trainer.train()\n","# Save model\n","model.save_pretrained('/content/drive/MyDrive/828E_Ophir_Mollie/trained_models/non-robust_model_50_epochs')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"78895bb97f994d9d87a8ac59e200c67f","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=442.0, style=ProgressStyle(description_…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"0bbdbcfb693148b99db1c4a02edf8577","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=267967963.0, style=ProgressStyle(descri…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"stream","text":["Some weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertForMultilabelSequenceClassification: ['vocab_transform.weight', 'vocab_transform.bias', 'vocab_layer_norm.weight', 'vocab_layer_norm.bias', 'vocab_projector.weight', 'vocab_projector.bias']\n","- This IS expected if you are initializing DistilBertForMultilabelSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertForMultilabelSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","Some weights of DistilBertForMultilabelSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['pre_classifier.weight', 'pre_classifier.bias', 'classifier.weight', 'classifier.bias']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","        </style>\n","      \n","      <progress value='3400' max='3400' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [3400/3400 25:48, Epoch 50/50]\n","    </div>\n","    <table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>Epoch</th>\n","      <th>Training Loss</th>\n","      <th>Validation Loss</th>\n","      <th>Runtime</th>\n","      <th>Samples Per Second</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>1</td>\n","      <td>0.580200</td>\n","      <td>0.487660</td>\n","      <td>0.184800</td>\n","      <td>1460.732000</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.355600</td>\n","      <td>0.335933</td>\n","      <td>0.220800</td>\n","      <td>1222.585000</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.298800</td>\n","      <td>0.291919</td>\n","      <td>0.203100</td>\n","      <td>1329.607000</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.240500</td>\n","      <td>0.230213</td>\n","      <td>0.216400</td>\n","      <td>1247.565000</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.229300</td>\n","      <td>0.222261</td>\n","      <td>0.219600</td>\n","      <td>1229.414000</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.191700</td>\n","      <td>0.200092</td>\n","      <td>0.186800</td>\n","      <td>1445.645000</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.124900</td>\n","      <td>0.207521</td>\n","      <td>0.228200</td>\n","      <td>1183.271000</td>\n","    </tr>\n","    <tr>\n","      <td>8</td>\n","      <td>0.115800</td>\n","      <td>0.210392</td>\n","      <td>0.185800</td>\n","      <td>1453.447000</td>\n","    </tr>\n","    <tr>\n","      <td>9</td>\n","      <td>0.097900</td>\n","      <td>0.205249</td>\n","      <td>0.208600</td>\n","      <td>1294.503000</td>\n","    </tr>\n","    <tr>\n","      <td>10</td>\n","      <td>0.075000</td>\n","      <td>0.238366</td>\n","      <td>0.206600</td>\n","      <td>1306.938000</td>\n","    </tr>\n","    <tr>\n","      <td>11</td>\n","      <td>0.063800</td>\n","      <td>0.245996</td>\n","      <td>0.200000</td>\n","      <td>1349.956000</td>\n","    </tr>\n","    <tr>\n","      <td>12</td>\n","      <td>0.060300</td>\n","      <td>0.253819</td>\n","      <td>0.191800</td>\n","      <td>1407.444000</td>\n","    </tr>\n","    <tr>\n","      <td>13</td>\n","      <td>0.047500</td>\n","      <td>0.254205</td>\n","      <td>0.187900</td>\n","      <td>1436.978000</td>\n","    </tr>\n","    <tr>\n","      <td>14</td>\n","      <td>0.064600</td>\n","      <td>0.265110</td>\n","      <td>0.224500</td>\n","      <td>1202.655000</td>\n","    </tr>\n","    <tr>\n","      <td>15</td>\n","      <td>0.060300</td>\n","      <td>0.276057</td>\n","      <td>0.225100</td>\n","      <td>1199.216000</td>\n","    </tr>\n","    <tr>\n","      <td>16</td>\n","      <td>0.039000</td>\n","      <td>0.279536</td>\n","      <td>0.196800</td>\n","      <td>1372.249000</td>\n","    </tr>\n","    <tr>\n","      <td>17</td>\n","      <td>0.051900</td>\n","      <td>0.298153</td>\n","      <td>0.201600</td>\n","      <td>1339.135000</td>\n","    </tr>\n","    <tr>\n","      <td>18</td>\n","      <td>0.037900</td>\n","      <td>0.274780</td>\n","      <td>0.178200</td>\n","      <td>1515.160000</td>\n","    </tr>\n","    <tr>\n","      <td>19</td>\n","      <td>0.034100</td>\n","      <td>0.341366</td>\n","      <td>0.180400</td>\n","      <td>1496.709000</td>\n","    </tr>\n","    <tr>\n","      <td>20</td>\n","      <td>0.031200</td>\n","      <td>0.321203</td>\n","      <td>0.188900</td>\n","      <td>1429.272000</td>\n","    </tr>\n","    <tr>\n","      <td>21</td>\n","      <td>0.019500</td>\n","      <td>0.325621</td>\n","      <td>0.217300</td>\n","      <td>1242.680000</td>\n","    </tr>\n","    <tr>\n","      <td>22</td>\n","      <td>0.026800</td>\n","      <td>0.315363</td>\n","      <td>0.185000</td>\n","      <td>1459.490000</td>\n","    </tr>\n","    <tr>\n","      <td>23</td>\n","      <td>0.030300</td>\n","      <td>0.332702</td>\n","      <td>0.200900</td>\n","      <td>1343.838000</td>\n","    </tr>\n","    <tr>\n","      <td>24</td>\n","      <td>0.027400</td>\n","      <td>0.316585</td>\n","      <td>0.182400</td>\n","      <td>1480.062000</td>\n","    </tr>\n","    <tr>\n","      <td>25</td>\n","      <td>0.035600</td>\n","      <td>0.339849</td>\n","      <td>0.204100</td>\n","      <td>1322.838000</td>\n","    </tr>\n","    <tr>\n","      <td>26</td>\n","      <td>0.038800</td>\n","      <td>0.348817</td>\n","      <td>0.187800</td>\n","      <td>1438.014000</td>\n","    </tr>\n","    <tr>\n","      <td>27</td>\n","      <td>0.030300</td>\n","      <td>0.358642</td>\n","      <td>0.207600</td>\n","      <td>1300.546000</td>\n","    </tr>\n","    <tr>\n","      <td>28</td>\n","      <td>0.020700</td>\n","      <td>0.359956</td>\n","      <td>0.216900</td>\n","      <td>1244.814000</td>\n","    </tr>\n","    <tr>\n","      <td>29</td>\n","      <td>0.029400</td>\n","      <td>0.361318</td>\n","      <td>0.197300</td>\n","      <td>1368.753000</td>\n","    </tr>\n","    <tr>\n","      <td>30</td>\n","      <td>0.020700</td>\n","      <td>0.347327</td>\n","      <td>0.209800</td>\n","      <td>1286.696000</td>\n","    </tr>\n","    <tr>\n","      <td>31</td>\n","      <td>0.030000</td>\n","      <td>0.356725</td>\n","      <td>0.215400</td>\n","      <td>1253.377000</td>\n","    </tr>\n","    <tr>\n","      <td>32</td>\n","      <td>0.029700</td>\n","      <td>0.360682</td>\n","      <td>0.190300</td>\n","      <td>1418.706000</td>\n","    </tr>\n","    <tr>\n","      <td>33</td>\n","      <td>0.019800</td>\n","      <td>0.364549</td>\n","      <td>0.187600</td>\n","      <td>1439.601000</td>\n","    </tr>\n","    <tr>\n","      <td>34</td>\n","      <td>0.021900</td>\n","      <td>0.359000</td>\n","      <td>0.229600</td>\n","      <td>1176.150000</td>\n","    </tr>\n","    <tr>\n","      <td>35</td>\n","      <td>0.021300</td>\n","      <td>0.367874</td>\n","      <td>0.202100</td>\n","      <td>1335.797000</td>\n","    </tr>\n","    <tr>\n","      <td>36</td>\n","      <td>0.028200</td>\n","      <td>0.366782</td>\n","      <td>0.233400</td>\n","      <td>1156.864000</td>\n","    </tr>\n","    <tr>\n","      <td>37</td>\n","      <td>0.013900</td>\n","      <td>0.361988</td>\n","      <td>0.232000</td>\n","      <td>1163.643000</td>\n","    </tr>\n","    <tr>\n","      <td>38</td>\n","      <td>0.029300</td>\n","      <td>0.376896</td>\n","      <td>0.226800</td>\n","      <td>1190.375000</td>\n","    </tr>\n","    <tr>\n","      <td>39</td>\n","      <td>0.025200</td>\n","      <td>0.376105</td>\n","      <td>0.184000</td>\n","      <td>1467.424000</td>\n","    </tr>\n","    <tr>\n","      <td>40</td>\n","      <td>0.022000</td>\n","      <td>0.379247</td>\n","      <td>0.230300</td>\n","      <td>1172.331000</td>\n","    </tr>\n","    <tr>\n","      <td>41</td>\n","      <td>0.018800</td>\n","      <td>0.375071</td>\n","      <td>0.214600</td>\n","      <td>1258.056000</td>\n","    </tr>\n","    <tr>\n","      <td>42</td>\n","      <td>0.029900</td>\n","      <td>0.386576</td>\n","      <td>0.262000</td>\n","      <td>1030.641000</td>\n","    </tr>\n","    <tr>\n","      <td>43</td>\n","      <td>0.014000</td>\n","      <td>0.385875</td>\n","      <td>0.182400</td>\n","      <td>1480.244000</td>\n","    </tr>\n","    <tr>\n","      <td>44</td>\n","      <td>0.018800</td>\n","      <td>0.386629</td>\n","      <td>0.227500</td>\n","      <td>1186.994000</td>\n","    </tr>\n","    <tr>\n","      <td>45</td>\n","      <td>0.015600</td>\n","      <td>0.387773</td>\n","      <td>0.209600</td>\n","      <td>1287.954000</td>\n","    </tr>\n","    <tr>\n","      <td>46</td>\n","      <td>0.010800</td>\n","      <td>0.384271</td>\n","      <td>0.185300</td>\n","      <td>1456.991000</td>\n","    </tr>\n","    <tr>\n","      <td>47</td>\n","      <td>0.022300</td>\n","      <td>0.387436</td>\n","      <td>0.213100</td>\n","      <td>1267.261000</td>\n","    </tr>\n","    <tr>\n","      <td>48</td>\n","      <td>0.016100</td>\n","      <td>0.385950</td>\n","      <td>0.214200</td>\n","      <td>1260.365000</td>\n","    </tr>\n","    <tr>\n","      <td>49</td>\n","      <td>0.020600</td>\n","      <td>0.386644</td>\n","      <td>0.229500</td>\n","      <td>1176.379000</td>\n","    </tr>\n","    <tr>\n","      <td>50</td>\n","      <td>0.018100</td>\n","      <td>0.388249</td>\n","      <td>0.184400</td>\n","      <td>1464.126000</td>\n","    </tr>\n","  </tbody>\n","</table><p>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"CUljjmjhBr1A"},"source":["# Plotting Training history"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":291},"id":"s_tT8TR7BxNo","executionInfo":{"status":"ok","timestamp":1620699577734,"user_tz":240,"elapsed":818,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"7ef4255f-649d-45fe-9e6c-cd8d268ba1f4"},"source":["history = pd.read_csv('/content/drive/MyDrive/828E_Ophir_Mollie/trained_models/non-robust_model_50_epochs/train_history_log',sep='\\t')\n","\n","plt.style.use('seaborn-whitegrid')\n","plt.figure(figsize=(6,4))\n","plt.plot(history['Epoch'], history['Training Loss'], label='Training Loss')\n","plt.plot(history['Epoch'], history['Validation Loss'], label='Validation Loss')\n","plt.xlabel(\"No. Epoch\")\n","plt.ylabel(\"Loss\")\n","plt.title(\"Fine-tuned DistilBert\")\n","plt.legend()\n","plt.savefig('drive/MyDrive/828E_Ophir_Mollie/trained_models/non-robust_model_50_epochs/train_history_plot.png', dpi=300)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"To6vmtl6hxIC"},"source":["# Evaluation"]},{"cell_type":"markdown","metadata":{"id":"krNEQzZhhz6G"},"source":["Let's load up the trained model (if not already loaded)"]},{"cell_type":"code","metadata":{"id":"8fO1xhtKh9wL"},"source":["label_names = ['first', 'third', 'datasecurity', 'dataretention',\n","                           'user_access', 'user_choice', 'other']\n","NUM_LABELS = len(label_names)\n","# Loading the checkpoint with the best validation loss (checkpoint-408)\n","path_to_model_dir = '/content/drive/MyDrive/828E_Ophir_Mollie/trained_models/non-robust_model_50_epochs/checkpoint-408'\n","model = DistilBertForMultilabelSequenceClassification.from_pretrained(\n","    path_to_model_dir, \n","    num_labels=NUM_LABELS,\n","    id2label=dict(enumerate(label_names)), # use to show text labels\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AzAf4588mkVj"},"source":["Set it to evaluation mode --"]},{"cell_type":"code","metadata":{"id":"5klLln__lN7z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620877123804,"user_tz":240,"elapsed":2888,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"0ce3fc3a-4fdc-488d-c38d-e8218c3246ff"},"source":["model.eval()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DistilBertForMultilabelSequenceClassification(\n","  (distilbert): DistilBertModel(\n","    (embeddings): Embeddings(\n","      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n","      (position_embeddings): Embedding(512, 768)\n","      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","      (dropout): Dropout(p=0.1, inplace=False)\n","    )\n","    (transformer): Transformer(\n","      (layer): ModuleList(\n","        (0): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (1): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (2): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (3): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (4): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (5): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","      )\n","    )\n","  )\n","  (pre_classifier): Linear(in_features=768, out_features=768, bias=True)\n","  (classifier): Linear(in_features=768, out_features=7, bias=True)\n","  (dropout): Dropout(p=0.2, inplace=False)\n",")"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"2a54dEebTBS4"},"source":["## Qualitative Evaluation (Simple Predictions for Text Queries)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5sPhTOu9AzDK","executionInfo":{"status":"ok","timestamp":1620713670056,"user_tz":240,"elapsed":363,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"ae3aef5b-ec71-4cf6-8781-17f88ca9d747"},"source":["# Convert token to vocabulary indices\n","some_queries = [\"what information do you collect?\",  # label: 'first'\n","                \"are you certified to be secure?\",   # label: 'datasecurity'\n","                \"who can read the chat i have with the platform?\",   # labels: ['first',\t'third']\n","                ]\n","\n","def predict_labels(model, query):\n","    labels = np.array(['first', 'third', 'datasecurity', 'dataretention',\n","                           'user_access', 'user_choice', 'other'])\n","    # Convert inputs to PyTorch tensors\n","    tokens_tensor = torch.tensor(tokenizer([query], truncation=True, padding=True)['input_ids'])\n","    model.eval()\n","    tokens_tensor.to('cpu')\n","    model.to('cpu')\n","    probabilities = torch.sigmoid(model(tokens_tensor)[0][0])\n","    bool_pred = np.array([True if p > 0.5 else False for p in probabilities])\n","    label_pred = labels[bool_pred].tolist()\n","    return label_pred\n","\n","for query in some_queries:\n","    print(predict_labels(model, query))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['first']\n","['datasecurity']\n","['first']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YEVVumVoFbfb"},"source":["Let's check for consistency/robustness --"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OdDx5VmyEPU1","executionInfo":{"status":"ok","timestamp":1620713684542,"user_tz":240,"elapsed":997,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"f4f4f05b-b67f-4cc8-8a46-1dff65a2fe8f"},"source":["print(predict_labels(model, \"will other companies have access to my info?\"))\n","print(predict_labels(model, \"will other companies have access to my information?\"))\n","print(predict_labels(model, \"will other companies have access to my information?\"))\n","print(predict_labels(model, \"will other entities see my data?\"))\n","print(predict_labels(model, \"will other entities see my info?\"))\n","print(predict_labels(model, \"will other companies see my data?\"))\n","print()\n","print(predict_labels(model, \"will you allow me to remove data?\"))\n","print(predict_labels(model, \"will you let me to remove stuff?\"))\n","print(predict_labels(model, \"will you let me to remove everything?\"))\n","print()\n","print(predict_labels(model, \"could I delete my data?\"))\n","print(predict_labels(model, \"will I be able to delete my information?\"))\n","print()\n","print(predict_labels(model, \"will you keep my information forever?\"))\n","print(predict_labels(model, \"What will you do to my information?\"))\n","print(predict_labels(model, \"What will you do to my data?\"))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['third']\n","['third']\n","['third']\n","['third']\n","['third']\n","['third']\n","\n","[]\n","[]\n","[]\n","\n","[]\n","[]\n","\n","['dataretention']\n","['first']\n","['first', 'third']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-TL1mEDGGiO4"},"source":["We can see that small changes to the input will sometimes affect the model's output. We wanna see if we can make the model more robust to these changes by adding adversarial examples to the data."]},{"cell_type":"markdown","metadata":{"id":"VBbnAwA6PI4f"},"source":["## Quantitative Evaluation"]},{"cell_type":"markdown","metadata":{"id":"nt65t2VRBlc_"},"source":["Let's do a quick check to see that the model is indeed the one that performed best on the validation set (i.e. a loss of ~0.2) --"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":91},"id":"bW3Juyr8BBXi","executionInfo":{"status":"ok","timestamp":1620713714585,"user_tz":240,"elapsed":21083,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"a6e8e820-672f-43f9-b6a8-b498997eca1a"},"source":["evaluator = Trainer(\n","    model=model,                         # the instantiated 🤗 Transformers model to be trained\n","    eval_dataset=val_dataset,             # evaluation dataset\n",")\n","\n","eval_results = evaluator.evaluate()\n","print()\n","for key in ['eval_loss']:\n","    value = eval_results[key]\n","    if type(value) != type(np.array([])):\n","        print(f'{key}:', value)\n","    else:\n","        print(f'{key}:\\n')\n","        for lab, val in zip(label_names, value): \n","            print(f'{lab}:', val)\n","    print()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","        </style>\n","      \n","      <progress value='34' max='34' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [34/34 00:19]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","eval_loss: 0.2000916302204132\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_pPhYUZj_S5G"},"source":["Get the predictions and ground truths --"]},{"cell_type":"code","metadata":{"id":"auFuMvAD_PAu"},"source":["# Plot normalized confusion matrix (values in [0,1])\n","def predict_one_hot(model, input_tokens):\n","    # Convert inputs to PyTorch tensors\n","    model.to('cpu')\n","    probabilities = torch.sigmoid(model(input_tokens)[0][0])\n","    one_hot_pred = np.array([1 if p > 0.5 else 0 for p in probabilities])\n","    return one_hot_pred\n","\n","# produce one-hot preds \n","y_true = val_dataset[:]['labels'].tolist()\n","y_pred = torch.sigmoid(model(val_dataset[:]['input_ids'])[0]).round().detach().numpy().astype('int32').tolist()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5ki04e-zmxsz"},"source":["## Confusion Matrix"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"1zGMx-6Um2A5","executionInfo":{"status":"ok","timestamp":1620877349466,"user_tz":240,"elapsed":3745,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"3359a3a6-8407-4f7b-f847-de9d0a6ab828"},"source":["label_names = ['first', 'third', 'datasecurity', 'dataretention',\n","                           'user_access', 'user_choice', 'other']\n","con_mat = multilabel_confusion_matrix(y_true, y_pred) / len(y_true)\n","\n","fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(7,7))\n","for i, ax in enumerate(axes.flat):\n","    if i < 7:\n","        con_mat_df = pd.DataFrame(con_mat[i], index=['N', 'Y'], columns=['N', 'Y'])    \n","        sns.heatmap(con_mat_df, annot=True, ax=ax)\n","        ax.set_xlabel('Predicted Labels')\n","        ax.set_ylabel('True Labels')\n","        ax.set_title(label_names[i])\n","    else:\n","        ax.set_visible(False)\n","\n","plt.tight_layout() \n","plt.savefig('drive/MyDrive/828E_Ophir_Mollie/trained_models/non-robust_model_50_epochs/confusion_matrices.png', dpi=300)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 504x504 with 16 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"XkGM999ypfbA"},"source":["## Evaluate the model with the following metrics: accuracy, F1 score, precision, and recall."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UV6LMJ_xpnxD","executionInfo":{"status":"ok","timestamp":1620713925049,"user_tz":240,"elapsed":185,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"c705ea95-6588-41d3-94fc-e6957a547baf"},"source":["label_names = ['first', 'third', 'datasecurity', 'dataretention', 'user_access', 'user_choice', 'other']\n","# Print and save classification report\n","print('Validation F1 Accuracy: ', f1_score(y_true, y_pred,average='micro'))\n","print('Validation Flat Accuracy: ', accuracy_score(y_true, y_pred),'\\n')\n","clf_report = classification_report(y_true, y_pred, target_names=label_names)\n","pickle.dump(clf_report, open('drive/MyDrive/828E_Ophir_Mollie/trained_models/non-robust_model_50_epochs/classification_report.txt','wb')) #save report\n","print(clf_report)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Validation F1 Accuracy:  0.3026706231454006\n","Validation Flat Accuracy:  0.3 \n","\n","               precision    recall  f1-score   support\n","\n","        first       0.86      0.13      0.23       144\n","        third       1.00      0.11      0.19        66\n"," datasecurity       0.82      0.67      0.73        27\n","dataretention       0.88      0.64      0.74        11\n","  user_access       0.00      0.00      0.00         9\n","  user_choice       0.00      0.00      0.00        19\n","        other       0.00      0.00      0.00         2\n","\n","    micro avg       0.86      0.18      0.30       278\n","    macro avg       0.51      0.22      0.27       278\n"," weighted avg       0.80      0.18      0.26       278\n","  samples avg       0.19      0.18      0.18       278\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in samples with no predicted labels. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in samples with no true labels. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]}]}