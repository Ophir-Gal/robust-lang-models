{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"},"colab":{"name":"Robustifying distilBERT Trained on OPP-115","provenance":[{"file_id":"https://github.com/QData/TextAttack/blob/master/docs/2notebook/0_End_to_End.ipynb","timestamp":1620942907146}],"collapsed_sections":[],"toc_visible":true},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"f195e719be4c4e99a3a517d8b394e464":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_222f48f1426f4bf9a519de4d7f81e78e","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_1e52be20271e45a1927169d14b3379cf","IPY_MODEL_e3665416bba240ddae321704bb02deb2"]}},"222f48f1426f4bf9a519de4d7f81e78e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1e52be20271e45a1927169d14b3379cf":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_e7d98d4ccef642ddae71d88f9e37cf93","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":213450,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":213450,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_ed8567efa03e412fa7d1461f0c3aebe3"}},"e3665416bba240ddae321704bb02deb2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_de9381f790494be8b2e43c61ba88bc35","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 213k/213k [00:00&lt;00:00, 251kB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4aa211e6c359458ca9019491f9c7c2e3"}},"e7d98d4ccef642ddae71d88f9e37cf93":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"ed8567efa03e412fa7d1461f0c3aebe3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"de9381f790494be8b2e43c61ba88bc35":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"4aa211e6c359458ca9019491f9c7c2e3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"cf25679975dc43808ae06e6275a1fc15":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_cda6c3a5b03f457388fc8cc5f0fb12bd","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_a3d2f699d2bc4e11bc090114a73129de","IPY_MODEL_70e9b9fd0fae4072a47caa8709ffba83"]}},"cda6c3a5b03f457388fc8cc5f0fb12bd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a3d2f699d2bc4e11bc090114a73129de":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_95584b1a116546b4adcffaa244efc128","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":435797,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":435797,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2065c4262b1f456e9b4a95ea1af07728"}},"70e9b9fd0fae4072a47caa8709ffba83":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_fc92748e4d274673bc10a556e7b78f6e","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 436k/436k [00:00&lt;00:00, 660kB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_bedeee97eaa0497b9dd9669c27989247"}},"95584b1a116546b4adcffaa244efc128":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"2065c4262b1f456e9b4a95ea1af07728":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"fc92748e4d274673bc10a556e7b78f6e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"bedeee97eaa0497b9dd9669c27989247":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5f5165c1d3aa44c7a7f34eb5701f95da":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_0ffcb5bede2546f4b6d2b8b3f52fb097","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_973ae67d6430406886a559834aa796cd","IPY_MODEL_5a758cdc2fae45e891ec82f0986e7d3d"]}},"0ffcb5bede2546f4b6d2b8b3f52fb097":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"973ae67d6430406886a559834aa796cd":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_67890a88d68c49918a0a5afb807d8493","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":29,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":29,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3c1b3ba492da47e1a225d81e85a4d1d4"}},"5a758cdc2fae45e891ec82f0986e7d3d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_88793c8b2f2d424ebc850184ae1a5c79","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 29.0/29.0 [00:00&lt;00:00, 55.6B/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f2d00372e3d9416fb1063259e37b3761"}},"67890a88d68c49918a0a5afb807d8493":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"3c1b3ba492da47e1a225d81e85a4d1d4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"88793c8b2f2d424ebc850184ae1a5c79":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"f2d00372e3d9416fb1063259e37b3761":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"4ba5SKTDuItO"},"source":["\n","In this experiment we will load a pretrained distilBert and fine-tune it on an augmented version of the OPP-115 train set, show that it performs better on an adversarial version of the validation set, and finally train it again on both the train set and validation set (combined set) before evaluating it on the test set as the final evaluation."]},{"cell_type":"markdown","metadata":{"id":"pAULWT84i0fE"},"source":["## Imports & Dependencies"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eIfEBtQj0og4","executionInfo":{"status":"ok","timestamp":1621137971730,"user_tz":240,"elapsed":2764,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"a6409b0c-f29d-46c5-ebeb-82461c987527"},"source":["%%shell\n","rm -rf ./sample_data/\n","pip install transformers\n","pip install textattack\n","pip install torch==1.6 # need torch 1.6 for the augmenter to work"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.7/dist-packages (4.6.0)\n","Requirement already satisfied: huggingface-hub==0.0.8 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.8)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers) (20.9)\n","Requirement already satisfied: sacremoses in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.45)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: tokenizers<0.11,>=0.10.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.10.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.41.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.0.12)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.19.5)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from transformers) (4.0.1)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers) (2.4.7)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.15.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (8.0.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.0.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2020.12.5)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.4.1)\n","Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.7.4.3)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":[""]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"1edW-Qq6i8LX"},"source":["import torch\n","device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","import pandas as pd\n","import numpy as np\n","from google.colab import drive\n","import transformers\n","from transformers import DistilBertTokenizerFast, DistilBertModel, BertConfig, DistilBertPreTrainedModel\n","from transformers import DistilBertForSequenceClassification, Trainer, TrainingArguments\n","from sklearn import metrics\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import seaborn as sns\n","from sklearn.metrics import multilabel_confusion_matrix\n","from sklearn.metrics import plot_confusion_matrix\n","from sklearn.metrics import classification_report, f1_score, accuracy_score\n","import pickle\n","import textattack\n","from tqdm import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Nvq0e94XjLdY"},"source":["## Load & Prepare the OPP-115 Dataset from the Benchmark Paper (\"Majority\" Version)"]},{"cell_type":"markdown","metadata":{"id":"AZmtoo_tjpHU"},"source":["Mount Drive"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9u-BVO73jnrh","executionInfo":{"status":"ok","timestamp":1621138007639,"user_tz":240,"elapsed":16807,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"2377c79f-cd95-4638-ba52-332c9e3644a7"},"source":["from google.colab import drive\n","drive.mount('/content/drive/')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PmMLFdcio01C","executionInfo":{"status":"ok","timestamp":1621138014284,"user_tz":240,"elapsed":3288,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"1f972b70-f2e0-463e-87eb-9b04bc2532ef"},"source":["train_set = pd.read_csv('/content/drive/MyDrive/828E_Ophir_Mollie/Polisis_Benchmark/datasets/Majority/train_dataset.csv', names=['segment', 'label'])\n","valid_set = pd.read_csv('/content/drive/MyDrive/828E_Ophir_Mollie/Polisis_Benchmark/datasets/Majority/validation_dataset.csv', names=['segment', 'label'])\n","test_set = pd.read_csv('/content/drive/MyDrive/828E_Ophir_Mollie/Polisis_Benchmark/datasets/Majority/test_dataset.csv', names=['segment', 'label'])\n","print('train set labels')\n","print('\\n'.join([str(i)+'. '+ s for i, s in enumerate(train_set.label.unique())]))\n","print()\n","print('valid set labels')\n","print('\\n'.join([str(i)+'. '+ s for i, s in enumerate(valid_set.label.unique())]))\n","print()\n","print('test set labels')\n","print('\\n'.join([str(i)+'. '+ s for i, s in enumerate(test_set.label.unique())]))\n","print()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["train set labels\n","0. First Party Collection/Use\n","1. Third Party Sharing/Collection\n","2. User Choice/Control\n","3. Privacy contact information\n","4. Introductory/Generic\n","5. Practice not covered\n","6. Data Security\n","7. User Access, Edit and Deletion\n","8. Policy Change\n","9. Do Not Track\n","10. International and Specific Audiences\n","11. Data Retention\n","\n","valid set labels\n","0. International and Specific Audiences\n","1. Privacy contact information\n","2. First Party Collection/Use\n","3. Third Party Sharing/Collection\n","4. Introductory/Generic\n","5. Practice not covered\n","6. Data Security\n","7. User Access, Edit and Deletion\n","8. Do Not Track\n","9. Data Retention\n","10. Policy Change\n","11. User Choice/Control\n","\n","test set labels\n","0. Introductory/Generic\n","1. Data Retention\n","2. User Access, Edit and Deletion\n","3. Privacy contact information\n","4. First Party Collection/Use\n","5. Third Party Sharing/Collection\n","6. Data Security\n","7. User Choice/Control\n","8. Policy Change\n","9. International and Specific Audiences\n","10. Practice not covered\n","11. Do Not Track\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"A3Ds9BBV0rCZ"},"source":["Convert text labels to numbers"]},{"cell_type":"code","metadata":{"id":"6vdoo5IIqg53"},"source":["label2idx = dict([('First Party Collection/Use', 0),\n","             ('Third Party Sharing/Collection', 1),\n","             ('User Access, Edit and Deletion', 2),\n","             ('Data Retention', 3),\n","             ('Data Security', 4),\n","             ('International and Specific Audiences', 5),\n","             ('Do Not Track', 6),\n","             ('Policy Change', 7),\n","             ('User Choice/Control', 8),\n","             ('Introductory/Generic', 9),\n","             ('Practice not covered', 10),\n","             ('Privacy contact information', 11)])\n","idx2label = {value : key for (key, value) in label2idx.items()}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tbXpWqCBzgDT","executionInfo":{"status":"ok","timestamp":1621138016169,"user_tz":240,"elapsed":187,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"44800a48-82f3-4afa-d416-70d62489fbaa"},"source":["train_set.label = train_set.label.apply(lambda s: label2idx[s])\n","valid_set.label = valid_set.label.apply(lambda s: label2idx[s])\n","test_set.label = test_set.label.apply(lambda s: label2idx[s])\n","print('train set labels')\n","print('\\n'.join([str(i)+'. '+ str(s) for i, s in enumerate(train_set.label.unique())]))\n","print()\n","print('valid set labels')\n","print('\\n'.join([str(i)+'. '+ str(s) for i, s in enumerate(valid_set.label.unique())]))\n","print()\n","print('test set labels')\n","print('\\n'.join([str(i)+'. '+ str(s) for i, s in enumerate(test_set.label.unique())]))\n","print()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["train set labels\n","0. 0\n","1. 1\n","2. 8\n","3. 11\n","4. 9\n","5. 10\n","6. 4\n","7. 2\n","8. 7\n","9. 6\n","10. 5\n","11. 3\n","\n","valid set labels\n","0. 5\n","1. 11\n","2. 0\n","3. 1\n","4. 9\n","5. 10\n","6. 4\n","7. 2\n","8. 6\n","9. 3\n","10. 7\n","11. 8\n","\n","test set labels\n","0. 9\n","1. 3\n","2. 2\n","3. 11\n","4. 0\n","5. 1\n","6. 4\n","7. 8\n","8. 7\n","9. 5\n","10. 10\n","11. 6\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":181,"referenced_widgets":["f195e719be4c4e99a3a517d8b394e464","222f48f1426f4bf9a519de4d7f81e78e","1e52be20271e45a1927169d14b3379cf","e3665416bba240ddae321704bb02deb2","e7d98d4ccef642ddae71d88f9e37cf93","ed8567efa03e412fa7d1461f0c3aebe3","de9381f790494be8b2e43c61ba88bc35","4aa211e6c359458ca9019491f9c7c2e3","cf25679975dc43808ae06e6275a1fc15","cda6c3a5b03f457388fc8cc5f0fb12bd","a3d2f699d2bc4e11bc090114a73129de","70e9b9fd0fae4072a47caa8709ffba83","95584b1a116546b4adcffaa244efc128","2065c4262b1f456e9b4a95ea1af07728","fc92748e4d274673bc10a556e7b78f6e","bedeee97eaa0497b9dd9669c27989247","5f5165c1d3aa44c7a7f34eb5701f95da","0ffcb5bede2546f4b6d2b8b3f52fb097","973ae67d6430406886a559834aa796cd","5a758cdc2fae45e891ec82f0986e7d3d","67890a88d68c49918a0a5afb807d8493","3c1b3ba492da47e1a225d81e85a4d1d4","88793c8b2f2d424ebc850184ae1a5c79","f2d00372e3d9416fb1063259e37b3761"]},"id":"JOTlI5enXPzr","executionInfo":{"status":"ok","timestamp":1621138020033,"user_tz":240,"elapsed":1566,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"7c151aae-65e1-4d07-9137-b4a002f95a19"},"source":["tokenizer = DistilBertTokenizerFast.from_pretrained('bert-base-cased')\n","train_encodings = tokenizer(train_set.segment.to_list(), truncation=True, padding=True)\n","val_encodings = tokenizer(valid_set.segment.to_list(), truncation=True, padding=True)\n","test_encodings = tokenizer(test_set.segment.to_list(), truncation=True, padding=True)\n","class OppDataset(torch.utils.data.Dataset):\n","    def __init__(self, encodings, labels):\n","        self.encodings = encodings\n","        self.labels = labels\n","\n","    def __getitem__(self, idx):\n","        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\n","        item['labels'] = torch.tensor(self.labels[idx])\n","        return item\n","\n","    def __len__(self):\n","        return len(self.labels)\n","\n","train_dataset = OppDataset(train_encodings, train_set.label.to_list())\n","val_dataset = OppDataset(val_encodings, valid_set.label.to_list())\n","test_dataset = OppDataset(test_encodings, test_set.label.to_list())"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"f195e719be4c4e99a3a517d8b394e464","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=213450.0, style=ProgressStyle(descripti…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"cf25679975dc43808ae06e6275a1fc15","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=435797.0, style=ProgressStyle(descripti…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"5f5165c1d3aa44c7a7f34eb5701f95da","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=29.0, style=ProgressStyle(description_w…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.\n"],"name":"stderr"},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PobbiLmmuItV"},"source":["## Training (Augmented training set)\n"]},{"cell_type":"code","metadata":{"id":"SIoMmX-lhNEm"},"source":["output_dir = '/content/drive/MyDrive/828E_Ophir_Mollie/trained_models/robust_model_20_epochs_opp'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JqOHtKVYPN-N"},"source":["Augmnet the train set with adversarial examples --"]},{"cell_type":"code","metadata":{"id":"OhwSYYzvoZCx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621050044161,"user_tz":240,"elapsed":4258026,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghc7IMJmHGBHX09cRSdZE-ghxUmylfzPbFKdpxEUQ=s64","userId":"18416188950270533293"}},"outputId":"3f0cef89-522f-447b-95da-648e838dbbcc"},"source":["adv_train_subset = train_set.iloc[:int(len(train_set)/2)].copy()\n","augmenter = textattack.augmentation.recipes.WordNetAugmenter(\n","    pct_words_to_swap=0.1, \n","    transformations_per_example=1\n","    )\n","adv_train_subset.segment = adv_train_subset.segment.apply(lambda s: augmenter.augment(s)[0])\n","print(adv_train_subset.equals(train_set.iloc[:int(len(train_set)/2)]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["False\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hVVm1C62PNXy"},"source":["augmented_train_set = train_set.copy().append(adv_train_subset)\n","augmented_train_set.to_csv(output_dir+'/augmented_train_set.csv')\n","\n","augmented_train_encodings = tokenizer(augmented_train_set.segment.to_list(), truncation=True, padding=True)\n","augmented_train_dataset = OppDataset(augmented_train_encodings, augmented_train_set.label.to_list())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EXSfPrxEYH_c"},"source":["smaller_augmented_train_set = augmented_train_set.iloc[:int(len(train_set)*1.20)]\n","augmented_train_encodings = tokenizer(smaller_augmented_train_set.segment.to_list(), truncation=True, padding=True)\n","augmented_train_dataset = OppDataset(augmented_train_encodings, smaller_augmented_train_set.label.to_list())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v_SzAim8uItW","colab":{"base_uri":"https://localhost:8080/","height":777},"executionInfo":{"status":"ok","timestamp":1621058579276,"user_tz":240,"elapsed":3837196,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghc7IMJmHGBHX09cRSdZE-ghxUmylfzPbFKdpxEUQ=s64","userId":"18416188950270533293"}},"outputId":"4e220513-d10d-47c4-9754-a2d9e129086a"},"source":["training_args = TrainingArguments(\n","    output_dir=output_dir, # output directory for model predictions and checkpoints\n","    num_train_epochs=20,              # total number of training epochs\n","    per_device_train_batch_size=16,  # batch size per device during training\n","    per_device_eval_batch_size=64,   # batch size for evaluation\n","    warmup_steps=500,                # number of warmup steps for learning rate scheduler\n","    weight_decay=0.01,               # strength of weight decay\n","    logging_steps=10,\n","    logging_dir=output_dir+'/logs',\n","    load_best_model_at_end=True, # will save/checkpoint the model after every evaluation\n","    evaluation_strategy=\"epoch\", # will evaluate every epoch\n","    # DO NOT USE # label_names=label_names,  # DO NOT USE THIS --- THROWS ERROR\n",")\n","\n","NUM_LABELS = len(idx2label)\n","model = DistilBertForSequenceClassification.from_pretrained(\n","    \"distilbert-base-cased\", \n","    num_labels=NUM_LABELS,\n","    id2label=idx2label, # use to show text labels\n","    )\n","\n","trainer = Trainer(\n","    model=model,                         # the instantiated 🤗 Transformers model to be trained\n","    args=training_args,                  # training arguments, defined above\n","    train_dataset=augmented_train_dataset,         # training dataset\n","    eval_dataset=val_dataset,            # evaluation dataset\n",")\n","\n","# Start the training\n","trainer.train()\n","# Save model\n","model.save_pretrained(output_dir)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Some weights of the model checkpoint at distilbert-base-cased were not used when initializing DistilBertForSequenceClassification: ['vocab_layer_norm.bias', 'vocab_projector.weight', 'vocab_layer_norm.weight', 'vocab_projector.bias', 'vocab_transform.weight', 'vocab_transform.bias']\n","- This IS expected if you are initializing DistilBertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-cased and are newly initialized: ['classifier.weight', 'pre_classifier.weight', 'classifier.bias', 'pre_classifier.bias']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","      \n","      <progress value='3960' max='3960' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [3960/3960 1:03:50, Epoch 20/20]\n","    </div>\n","    <table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>Epoch</th>\n","      <th>Training Loss</th>\n","      <th>Validation Loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>1</td>\n","      <td>1.582400</td>\n","      <td>1.593798</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>1.250400</td>\n","      <td>1.014523</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.852900</td>\n","      <td>0.949055</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.731100</td>\n","      <td>0.947929</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.621100</td>\n","      <td>0.846157</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.699600</td>\n","      <td>0.845683</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.519800</td>\n","      <td>0.922354</td>\n","    </tr>\n","    <tr>\n","      <td>8</td>\n","      <td>0.462400</td>\n","      <td>0.877539</td>\n","    </tr>\n","    <tr>\n","      <td>9</td>\n","      <td>0.384700</td>\n","      <td>0.953834</td>\n","    </tr>\n","    <tr>\n","      <td>10</td>\n","      <td>0.311200</td>\n","      <td>0.884321</td>\n","    </tr>\n","    <tr>\n","      <td>11</td>\n","      <td>0.354000</td>\n","      <td>0.903355</td>\n","    </tr>\n","    <tr>\n","      <td>12</td>\n","      <td>0.375000</td>\n","      <td>0.856497</td>\n","    </tr>\n","    <tr>\n","      <td>13</td>\n","      <td>0.389700</td>\n","      <td>0.935518</td>\n","    </tr>\n","    <tr>\n","      <td>14</td>\n","      <td>0.310800</td>\n","      <td>0.921465</td>\n","    </tr>\n","    <tr>\n","      <td>15</td>\n","      <td>0.249400</td>\n","      <td>0.902773</td>\n","    </tr>\n","    <tr>\n","      <td>16</td>\n","      <td>0.276200</td>\n","      <td>0.945398</td>\n","    </tr>\n","    <tr>\n","      <td>17</td>\n","      <td>0.333600</td>\n","      <td>0.958058</td>\n","    </tr>\n","    <tr>\n","      <td>18</td>\n","      <td>0.214400</td>\n","      <td>0.936690</td>\n","    </tr>\n","    <tr>\n","      <td>19</td>\n","      <td>0.219500</td>\n","      <td>0.970102</td>\n","    </tr>\n","    <tr>\n","      <td>20</td>\n","      <td>0.231100</td>\n","      <td>0.979979</td>\n","    </tr>\n","  </tbody>\n","</table><p>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"Sn7VcJB9boVS","colab":{"base_uri":"https://localhost:8080/","height":291},"executionInfo":{"status":"ok","timestamp":1621059686322,"user_tz":240,"elapsed":881,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghc7IMJmHGBHX09cRSdZE-ghxUmylfzPbFKdpxEUQ=s64","userId":"18416188950270533293"}},"outputId":"acb39c0c-ddf1-49dd-e74d-deb94874a415"},"source":["log = \"\"\"Epoch\tTraining Loss\tValidation Loss\n","1\t1.582400\t1.593798\n","2\t1.250400\t1.014523\n","3\t0.852900\t0.949055\n","4\t0.731100\t0.947929\n","5\t0.621100\t0.846157\n","6\t0.699600\t0.845683\n","7\t0.519800\t0.922354\n","8\t0.462400\t0.877539\n","9\t0.384700\t0.953834\n","10\t0.311200\t0.884321\n","11\t0.354000\t0.903355\n","12\t0.375000\t0.856497\n","13\t0.389700\t0.935518\n","14\t0.310800\t0.921465\n","15\t0.249400\t0.902773\n","16\t0.276200\t0.945398\n","17\t0.333600\t0.958058\n","18\t0.214400\t0.936690\n","19\t0.219500\t0.970102\n","20\t0.231100\t0.979979\n","\"\"\"\n","with open(output_dir+'/train_history_log', 'w') as f:\n","    f.write(log)\n","\n","history = pd.read_csv(output_dir+'/train_history_log',sep='\\t')\n","\n","plt.style.use('seaborn-whitegrid')\n","plt.figure(figsize=(6,4))\n","plt.plot(history['Epoch'], history['Training Loss'], label='Training Loss')\n","plt.plot(history['Epoch'], history['Validation Loss'], label='Validation Loss')\n","plt.xlabel(\"No. Epoch\")\n","plt.ylabel(\"Loss\")\n","plt.title(\"Fine-tuned DistilBert\")\n","plt.legend()\n","plt.savefig(output_dir+'/train_history_plot.png', dpi=300)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"DgjlL6HZuItY"},"source":["## Evaluation (Adversarial validation set from previous experiment)\n"]},{"cell_type":"code","metadata":{"id":"j8wK-yCsgLzh","colab":{"base_uri":"https://localhost:8080/","height":437},"executionInfo":{"status":"ok","timestamp":1621059744572,"user_tz":240,"elapsed":25062,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghc7IMJmHGBHX09cRSdZE-ghxUmylfzPbFKdpxEUQ=s64","userId":"18416188950270533293"}},"outputId":"bf1d9201-b313-4dac-a7e6-09cfee48ffc4"},"source":["adv_valid_set = pd.read_csv('/content/drive/MyDrive/828E_Ophir_Mollie/trained_models/non-robust_model_300_epochs_opp/adv_valid_set.csv')\n","adv_valid_encodings = tokenizer(adv_valid_set.segment.to_list(), truncation=True, padding=True)\n","adv_valid_dataset = OppDataset(adv_valid_encodings, adv_valid_set.label.to_list())\n","\n","model = DistilBertForSequenceClassification.from_pretrained(\n","    output_dir, \n","    num_labels=len(idx2label),\n","    id2label=idx2label, # use to show text labels\n",")\n","model.eval()\n","evaluator = Trainer(\n","    model=model,                         # the instantiated 🤗 Transformers model to be trained\n","    eval_dataset=adv_valid_dataset,             # evaluation dataset\n",")\n","\n","eval_results = evaluator.evaluate()\n","print()\n","for key in ['eval_loss']:\n","    value = eval_results[key]\n","    if type(value) != type(np.array([])):\n","        print(f'{key}:', value)\n","    else:\n","        print(f'{key}:\\n')\n","        for lab, val in zip(label_names, value): \n","            print(f'{lab}:', val)\n","    print()\n","\n","eval_results = evaluator.predict(adv_valid_dataset)\n","model.to('cpu')\n","\n","# produce one-hot preds \n","y_true = eval_results[1].tolist()\n","y_pred = eval_results[0].argmax(axis=-1).tolist()\n","\n","label_names = list(label2idx.keys())\n","# Print and save classification report\n","print('Validation Flat Accuracy: ', accuracy_score(y_true, y_pred),'\\n')\n","\n","clf_report = classification_report(y_true, y_pred, target_names=label_names)\n","pickle.dump(clf_report, open(output_dir+'/classification_report.txt','wb')) #save report\n","print(clf_report)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","      \n","      <progress value='162' max='81' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [81/81 00:20]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","eval_loss: 0.9166969060897827\n","\n","Validation Flat Accuracy:  0.7067901234567902 \n","\n","                                      precision    recall  f1-score   support\n","\n","          First Party Collection/Use       0.72      0.77      0.74       176\n","      Third Party Sharing/Collection       0.76      0.68      0.72       158\n","      User Access, Edit and Deletion       0.61      0.92      0.73        24\n","                      Data Retention       0.36      0.36      0.36        14\n","                       Data Security       0.65      0.71      0.68        31\n","International and Specific Audiences       0.77      0.90      0.83        41\n","                        Do Not Track       0.75      0.50      0.60         6\n","                       Policy Change       0.79      0.76      0.78        25\n","                 User Choice/Control       0.63      0.67      0.65        48\n","                Introductory/Generic       0.76      0.72      0.74        72\n","                Practice not covered       0.32      0.33      0.33        21\n","         Privacy contact information       0.94      0.50      0.65        32\n","\n","                            accuracy                           0.71       648\n","                           macro avg       0.67      0.65      0.65       648\n","                        weighted avg       0.72      0.71      0.71       648\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Iz77l7sSMPq7"},"source":["## Train one last time (augmented training set + validation set)"]},{"cell_type":"code","metadata":{"id":"BBsz5WjPCfp_"},"source":["augmented_train_set = pd.read_csv('/content/drive/MyDrive/828E_Ophir_Mollie/trained_models/robust_model_10_epochs_opp/augmented_train_set.csv')\n","smaller_augmented_train_set = augmented_train_set.iloc[:int(len(train_set)*1.20)]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZP_o51cQW9jB"},"source":["output_dir = '/content/drive/MyDrive/828E_Ophir_Mollie/trained_models/final_robust_model_20_epochs_opp'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FrmVWdXAeCDR","colab":{"base_uri":"https://localhost:8080/","height":777},"executionInfo":{"status":"ok","timestamp":1621103630446,"user_tz":240,"elapsed":4304190,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghc7IMJmHGBHX09cRSdZE-ghxUmylfzPbFKdpxEUQ=s64","userId":"18416188950270533293"}},"outputId":"083cc4a7-ad40-47e4-9bfc-31693218fd4a"},"source":["final_train_set = smaller_augmented_train_set.append(valid_set)\n","\n","final_train_encodings = tokenizer(final_train_set.segment.to_list(), truncation=True, padding=True)\n","final_train_dataset = OppDataset(final_train_encodings, final_train_set.label.to_list())\n","\n","training_args = TrainingArguments(\n","    output_dir=output_dir, # output directory for model predictions and checkpoints\n","    num_train_epochs=20,              # total number of training epochs\n","    per_device_train_batch_size=16,  # batch size per device during training\n","    per_device_eval_batch_size=64,   # batch size for evaluation\n","    warmup_steps=500,                # number of warmup steps for learning rate scheduler\n","    weight_decay=0.01,               # strength of weight decay\n","    logging_steps=10,\n","    logging_dir=output_dir+'/logs',\n","    load_best_model_at_end=True, # will save/checkpoint the model after every evaluation\n","    evaluation_strategy=\"epoch\", # will evaluate every epoch\n","    # DO NOT USE # label_names=label_names,  # DO NOT USE THIS --- THROWS ERROR\n",")\n","\n","model = DistilBertForSequenceClassification.from_pretrained(\n","    'distilbert-base-cased', \n","    num_labels=len(idx2label),\n","    id2label=idx2label, # use to show text labels\n","    )\n","\n","trainer = Trainer(\n","    model=model,                         # the instantiated 🤗 Transformers model to be trained\n","    args=training_args,                  # training arguments, defined above\n","    eval_dataset=test_dataset,\n","    train_dataset=final_train_dataset,         # training dataset\n",")\n","\n","# Start the training\n","trainer.train()\n","# Save model\n","model.save_pretrained(output_dir)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Some weights of the model checkpoint at distilbert-base-cased were not used when initializing DistilBertForSequenceClassification: ['vocab_projector.weight', 'vocab_transform.bias', 'vocab_projector.bias', 'vocab_layer_norm.bias', 'vocab_layer_norm.weight', 'vocab_transform.weight']\n","- This IS expected if you are initializing DistilBertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-cased and are newly initialized: ['classifier.weight', 'pre_classifier.bias', 'classifier.bias', 'pre_classifier.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","      \n","      <progress value='4780' max='4780' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [4780/4780 1:11:37, Epoch 20/20]\n","    </div>\n","    <table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>Epoch</th>\n","      <th>Training Loss</th>\n","      <th>Validation Loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <td>1</td>\n","      <td>1.437500</td>\n","      <td>1.175597</td>\n","    </tr>\n","    <tr>\n","      <td>2</td>\n","      <td>0.856900</td>\n","      <td>0.952895</td>\n","    </tr>\n","    <tr>\n","      <td>3</td>\n","      <td>0.798100</td>\n","      <td>0.888744</td>\n","    </tr>\n","    <tr>\n","      <td>4</td>\n","      <td>0.620500</td>\n","      <td>0.984051</td>\n","    </tr>\n","    <tr>\n","      <td>5</td>\n","      <td>0.514800</td>\n","      <td>0.868919</td>\n","    </tr>\n","    <tr>\n","      <td>6</td>\n","      <td>0.604000</td>\n","      <td>0.815988</td>\n","    </tr>\n","    <tr>\n","      <td>7</td>\n","      <td>0.498600</td>\n","      <td>0.793339</td>\n","    </tr>\n","    <tr>\n","      <td>8</td>\n","      <td>0.403200</td>\n","      <td>0.815822</td>\n","    </tr>\n","    <tr>\n","      <td>9</td>\n","      <td>0.422400</td>\n","      <td>0.854183</td>\n","    </tr>\n","    <tr>\n","      <td>10</td>\n","      <td>0.439000</td>\n","      <td>0.864156</td>\n","    </tr>\n","    <tr>\n","      <td>11</td>\n","      <td>0.322000</td>\n","      <td>0.860398</td>\n","    </tr>\n","    <tr>\n","      <td>12</td>\n","      <td>0.333300</td>\n","      <td>0.900204</td>\n","    </tr>\n","    <tr>\n","      <td>13</td>\n","      <td>0.321300</td>\n","      <td>0.839935</td>\n","    </tr>\n","    <tr>\n","      <td>14</td>\n","      <td>0.334000</td>\n","      <td>0.866333</td>\n","    </tr>\n","    <tr>\n","      <td>15</td>\n","      <td>0.301200</td>\n","      <td>0.904603</td>\n","    </tr>\n","    <tr>\n","      <td>16</td>\n","      <td>0.299900</td>\n","      <td>0.892575</td>\n","    </tr>\n","    <tr>\n","      <td>17</td>\n","      <td>0.216200</td>\n","      <td>0.889306</td>\n","    </tr>\n","    <tr>\n","      <td>18</td>\n","      <td>0.365400</td>\n","      <td>0.903209</td>\n","    </tr>\n","    <tr>\n","      <td>19</td>\n","      <td>0.249900</td>\n","      <td>0.923395</td>\n","    </tr>\n","    <tr>\n","      <td>20</td>\n","      <td>0.209700</td>\n","      <td>0.934162</td>\n","    </tr>\n","  </tbody>\n","</table><p>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"q0uPXzUQuIta"},"source":["## Final Evaluation (on test set)\n","\n","Let's do a final evaluation of our robustified, fine-tuned model on the test set."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":387},"id":"PCtB4OqL0FCc","executionInfo":{"status":"ok","timestamp":1621103644658,"user_tz":240,"elapsed":4285929,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghc7IMJmHGBHX09cRSdZE-ghxUmylfzPbFKdpxEUQ=s64","userId":"18416188950270533293"}},"outputId":"807a0143-6626-4d69-cbdc-23901633eca2"},"source":["model = DistilBertForSequenceClassification.from_pretrained(\n","    output_dir, \n","    num_labels=len(idx2label),\n","    id2label=idx2label, # use to show text labels\n",")\n","model.eval()\n","evaluator = Trainer(\n","    model=model,                         # the instantiated 🤗 Transformers model to be trained\n","    eval_dataset=test_dataset,             # evaluation dataset\n",")\n","\n","eval_results = evaluator.predict(test_dataset)\n","model.to('cpu')\n","\n","# produce one-hot preds \n","y_true = eval_results[1].tolist()\n","y_pred = eval_results[0].argmax(axis=-1).tolist()\n","\n","label_names = list(label2idx.keys())\n","# Print and save classification report\n","print('Test Set Flat Accuracy: ', accuracy_score(y_true, y_pred),'\\n')\n","\n","clf_report = classification_report(y_true, y_pred, target_names=label_names)\n","pickle.dump(clf_report, open(output_dir+'/classification_report.txt','wb')) #save report\n","print(clf_report)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","      \n","      <progress value='105' max='105' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [105/105 00:12]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Test Set Flat Accuracy:  0.7466986794717887 \n","\n","                                      precision    recall  f1-score   support\n","\n","          First Party Collection/Use       0.76      0.85      0.80       250\n","      Third Party Sharing/Collection       0.77      0.70      0.74       203\n","      User Access, Edit and Deletion       0.52      0.62      0.57        24\n","                      Data Retention       0.38      0.36      0.37        14\n","                       Data Security       0.87      0.65      0.74        40\n","International and Specific Audiences       0.73      0.86      0.79        56\n","                        Do Not Track       0.67      0.67      0.67         3\n","                       Policy Change       0.77      0.95      0.85        21\n","                 User Choice/Control       0.83      0.71      0.77        77\n","                Introductory/Generic       0.67      0.83      0.74        78\n","                Practice not covered       0.50      0.12      0.19        25\n","         Privacy contact information       0.84      0.64      0.73        42\n","\n","                            accuracy                           0.75       833\n","                           macro avg       0.69      0.66      0.66       833\n","                        weighted avg       0.75      0.75      0.74       833\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MxvQ4xKoW4or"},"source":["Generate final conf. matrix --"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":671},"id":"NaK-hX0RW7dq","executionInfo":{"status":"ok","timestamp":1621138474125,"user_tz":240,"elapsed":2500,"user":{"displayName":"Ophir Gal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhUzQDnmZYR6DKi5yEJXmdA_DE9U1uGX09u5ofw=s64","userId":"17199907658380278319"}},"outputId":"b3f98a82-847d-4ee9-cf98-7560b353f7c1"},"source":["# model = DistilBertForSequenceClassification.from_pretrained(\n","#     output_dir, \n","#     num_labels=len(idx2label),\n","#     id2label=idx2label, # use to show text labels\n","# )\n","\n","# model.eval()\n","# evaluator = Trainer(\n","#     model=model,                         # the instantiated 🤗 Transformers model to be trained\n","#     eval_dataset=test_dataset,             # evaluation dataset\n","# )\n","\n","# eval_results = evaluator.predict(test_dataset)\n","# model.to('cpu')\n","\n","# # produce one-hot preds \n","# y_true = eval_results[1].tolist()\n","# y_pred = eval_results[0].argmax(axis=-1).tolist()\n","\n","label_names = list(label2idx.keys())\n","label_names = [s[:15]+'...' for s in label_names]\n","\n","from sklearn.metrics import confusion_matrix, plot_confusion_matrix\n","# Plot normalized confusion matrix\n","con_mat = confusion_matrix(y_true, y_pred, normalize='true')\n","import pandas as pd\n","con_mat_df = pd.DataFrame(con_mat, \n","                          index = label_names,\n","                          columns = label_names)\n","figure = plt.figure(figsize=(10, 9))\n","import seaborn as sns\n","sns.heatmap(con_mat_df, annot=True)\n","plt.tight_layout()\n","plt.ylabel('True label')\n","plt.xlabel('Predicted label')\n","plt.savefig(output_dir+'/final_conf_matrix.png', dpi=300)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x648 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}